#include <stdio.h>
#include <stdlib.h>

// Structure to represent a block
struct Block {
    int id;
    char data[100]; // Assuming each block has a data field of maximum 100 characters
    struct Block* next; // Pointer to the next block
};

// Structure to represent the file with linked allocation
struct File {
    struct Block* firstBlock;
    struct Block* lastBlock;
};

// Function to read data from a block
void readBlock(struct Block* block) {
    printf("Enter data for Block %d: ", block->id);
    scanf("%s", block->data);
}

// Function to display data from a block
void displayBlock(struct Block* block) {
    printf("Block %d: %s\n", block->id, block->data);
}

// Function to add a new block to the file
void addBlock(struct File* file) {
    struct Block* newBlock = (struct Block*)malloc(sizeof(struct Block));
    newBlock->id = file->lastBlock->id + 1;
    readBlock(newBlock);
    newBlock->next = NULL;

    if (file->firstBlock == NULL) {
        file->firstBlock = newBlock;
        file->lastBlock = newBlock;
    } else {
        file->lastBlock->next = newBlock;
        file->lastBlock = newBlock;
    }
}

// Function to display all blocks in the file
void displayFile(struct File* file) {
    struct Block* currentBlock = file->firstBlock;
    while (currentBlock != NULL) {
        displayBlock(currentBlock);
        currentBlock = currentBlock->next;
    }
}

int main() {
    struct File file;
    file.firstBlock = NULL;
    file.lastBlock = NULL;

    // Get the total number of blocks from the user
    int totalBlocks;
    printf("Enter the total number of blocks: ");
    scanf("%d", &totalBlocks);

    // Create the file with linked allocation
    for (int i = 0; i < totalBlocks; ++i) {
        addBlock(&file);
    }

    // Display all blocks in the file
    printf("\nReading data from the linked allocation file:\n");
    displayFile(&file);

    return 0;
}
