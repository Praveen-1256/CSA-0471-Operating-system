#include <stdio.h>

#define MAX_FRAMES 3 // Change this to the desired number of frames

void printFrames(int frames[], int n) {
    printf("Frames: ");
    for (int i = 0; i < n; ++i) {
        if (frames[i] == -1) {
            printf("Empty ");
        } else {
            printf("%d ", frames[i]);
        }
    }
    printf("\n");
}

int isPageInFrames(int frames[], int n, int page) {
    for (int i = 0; i < n; ++i) {
        if (frames[i] == page) {
            return 1; // Page found in frames
        }
    }
    return 0; // Page not found in frames
}

void updatePageOrder(int pageOrder[], int n, int page) {
    for (int i = 0; i < n; ++i) {
        if (pageOrder[i] == page) {
            // Move the accessed page to the front
            for (int j = i; j > 0; --j) {
                pageOrder[j] = pageOrder[j - 1];
            }
            pageOrder[0] = page;
            break;
        }
    }
}

int main() {
    int frames[MAX_FRAMES];
    int pageOrder[MAX_FRAMES];
    int pageReferences[100]; // Assuming a maximum of 100 page references
    int n, pageFaults = 0;

    printf("Enter the number of page references: ");
    scanf("%d", &n);

    printf("Enter the page references: ");
    for (int i = 0; i < n; ++i) {
        scanf("%d", &pageReferences[i]);
    }

    for (int i = 0; i < MAX_FRAMES; ++i) {
        frames[i] = -1; // Initialize frames as empty
        pageOrder[i] = 0; // Initialize page order
    }

    for (int i = 0; i < n; ++i) {
        printf("Page %d -> ", pageReferences[i]);
        if (!isPageInFrames(frames, MAX_FRAMES, pageReferences[i])) {
            // Page fault
            printf("Page Fault!\n");
            pageFaults++;

            // Find the least recently used page
            int leastRecentlyUsed = pageOrder[MAX_FRAMES - 1];

            // Replace the least recently used page with the new page
            for (int j = 0; j < MAX_FRAMES; ++j) {
                if (frames[j] == leastRecentlyUsed) {
                    frames[j] = pageReferences[i];
                    break;
                }
            }

            // Update page order after replacement
            updatePageOrder(pageOrder, MAX_FRAMES, pageReferences[i]);

            printFrames(frames, MAX_FRAMES);
        } else {
            // Page hit
            printf("Page Hit!\n");

            // Update page order for the accessed page
            updatePageOrder(pageOrder, MAX_FRAMES, pageReferences[i]);

            printFrames(frames, MAX_FRAMES);
        }
    }

    printf("Total Page Faults: %d\n", pageFaults);

    return 0;
}
