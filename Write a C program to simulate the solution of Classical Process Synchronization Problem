#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <semaphore.h>

#define BUFFER_SIZE 5

int buffer[BUFFER_SIZE];
int in = 0;  // Index to insert item into buffer
int out = 0; // Index to remove item from buffer

sem_t empty, full;
pthread_mutex_t mutex;

void* producer(void* arg) {
    int item;
    while (1) {
        // Produce item
        item = rand() % 100;

        sem_wait(&empty); // Wait for an empty slot in the buffer
        pthread_mutex_lock(&mutex);

        // Insert item into buffer
        buffer[in] = item;
        in = (in + 1) % BUFFER_SIZE;

        printf("Produced item %d\n", item);

        pthread_mutex_unlock(&mutex);
        sem_post(&full); // Signal that the buffer is now full
    }
}

void* consumer(void* arg) {
    int item;
    while (1) {
        sem_wait(&full); // Wait for a full slot in the buffer
        pthread_mutex_lock(&mutex);

        // Remove item from buffer
        item = buffer[out];
        out = (out + 1) % BUFFER_SIZE;

        printf("Consumed item %d\n", item);

        pthread_mutex_unlock(&mutex);
        sem_post(&empty); // Signal that the buffer is now empty
    }
}

int main() {
    pthread_t producer_thread, consumer_thread;

    sem_init(&empty, 0, BUFFER_SIZE); // Initialize empty semaphore to buffer size
    sem_init(&full, 0, 0);            // Initialize full semaphore to 0
    pthread_mutex_init(&mutex, NULL); // Initialize mutex

    // Create producer and consumer threads
    pthread_create(&producer_thread, NULL, producer, NULL);
    pthread_create(&consumer_thread, NULL, consumer, NULL);

    // Join threads (not included in an infinite loop)
    pthread_join(producer_thread, NULL);
    pthread_join(consumer_thread, NULL);

    // Clean up
    sem_destroy(&empty);
    sem_destroy(&full);
    pthread_mutex_destroy(&mutex);

    return 0;
}
